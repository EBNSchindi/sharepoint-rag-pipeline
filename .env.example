# SharePoint RAG Pipeline - Environment Configuration
# Copy this file to .env and adjust values for your setup

# ============================================================================
# PLATFORM-SPECIFIC SETUP NOTES
# ============================================================================
# ü™ü Windows: Use backslashes in paths, ensure Docker Desktop is running
# üêß Linux: Add user to docker group: sudo usermod -aG docker $USER
# üçé macOS: Ensure Docker Desktop has sufficient resources allocated

# ============================================================================
# INPUT/OUTPUT CONFIGURATION
# ============================================================================

# Input directory containing PDF files (absolute path recommended)
# 
# Platform Examples:
# Linux/macOS:   INPUT_DIR=/home/user/Documents/pdfs
# Windows:       INPUT_DIR=C:\Users\YourName\Documents\PDFs
# Windows UNC:   INPUT_DIR=\\server\share\documents
# Docker relative: INPUT_DIR=./input
# Docker absolute: INPUT_DIR=/host/path/to/pdfs
INPUT_DIR=/path/to/your/sharepoint/pdfs

# Output directory for processed data (usually leave as default)
OUTPUT_DIR=/app/data

# Optional: Custom configuration directory
# CONFIG_DIR=./config

# ============================================================================
# PROCESSING CONFIGURATION
# ============================================================================

# Number of parallel workers (adjust based on CPU cores and RAM)
MAX_WORKERS=4

# Minimum quality score for chunks (0-100)
MIN_QUALITY_SCORE=70

# Timeout per document in seconds
TIMEOUT_PER_DOCUMENT=300

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO

# Enable file logging
LOG_TO_FILE=true

# ============================================================================
# STORAGE CONFIGURATION
# ============================================================================

# Vector store type: chromadb, json_fallback, both
VECTOR_STORE_TYPE=chromadb

# ChromaDB configuration
CHROMADB_HOST=localhost
CHROMADB_PORT=8000

# Enable JSON fallback mode
USE_JSON_FALLBACK=true

# ============================================================================
# SCHEDULING CONFIGURATION
# ============================================================================

# Cron schedule for automated processing (monthly at 2:00 AM)
CRON_SCHEDULE=0 2 1 * *

# Enable scheduler
ENABLE_SCHEDULER=false

# ============================================================================
# OPTIONAL AI FEATURES
# ============================================================================

# OpenAI API key for enhanced processing (optional)
# OPENAI_API_KEY=your-api-key-here

# ============================================================================
# DEVELOPMENT/TESTING
# ============================================================================

# Development mode
DEVELOPMENT_MODE=false

# Enable debug logging for agents
DEBUG_AGENTS=false

# Test mode with limited processing
TEST_MODE=false

# ============================================================================
# DOCKER-SPECIFIC CONFIGURATION
# ============================================================================

# Container resource limits (Docker Compose will use these)
# Adjust based on your system capabilities
DOCKER_MEMORY_LIMIT=4g
DOCKER_CPU_LIMIT=2.0
DOCKER_MEMORY_RESERVATION=2g
DOCKER_CPU_RESERVATION=1.0

# Docker volume options
# Options: local, nfs, bind
DOCKER_VOLUME_DRIVER=local

# Enable BuildKit for faster Docker builds (recommended)
# DOCKER_BUILDKIT=1

# Container timezone (optional)
# TZ=Europe/Berlin